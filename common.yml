server:
  servlet:
    jsp:
      init-parameters:
        development: true #修改jsp页面立即生效
  tomcat:
    basedir: .
    uri-encoding: UTF-8
#通用配置，注册中心、安全信息、rabbitmq
#测试：http://config:8880/common/dev
spring:
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  servlet:
    multipart:
      enabled: true
      max-file-size: 3000MB # 上传一个文件最大值,默认1Mb
      max-request-size: 3000MB # 上传多个文件最大值,50Mb,默认10Mb
  security:
    user:
      name: ${SERVER_USERNAME:user}
      password: ${SERVER_PASSWORD:password}
      roles: ${SERVER_SUPERUSER:SUPERUSER}
  rabbitmq:
    host: ${RABBITMQ_SERVER:192.168.2.118}
    port: ${RABBITMQ_SERVER_PORT:5672}
    username: ${RABBITMQ_SERVER_USERNAME:admin}
    password: ${RABBITMQ_SERVER_PASSWORD:123456}
    addresses: ${RABBITMQ_SERVER:192.168.2.118}
    listener:
      direct:
        acknowledge-mode: manual
        auto-startup: false
      simple:
        acknowledge-mode: manual
        auto-startup: false
  cloud:
    config:
      failFast: true
      retry: #和重试机制相关的配置有如下四个：
        max-interval: 2000 # 最大间隔时间，默认2000ms
        multiplier: 1.1 # 间隔乘数，默认1.1
        initial-interval: 1000 # 初始重试间隔时间，默认1000ms
        max-attempts: 6 # 配置重试次数，默认为6
    bus:
      enabled: false     #cloud bus总线开关
      refresh:
        enabled: false   #用于开启/关闭全局刷新的 Listener。
      env:
        enabled: false   #用于开启/关闭配置新增/修改的 Endpoint。
      ack:
        enabled: false   #用于开启开启/关闭 AckRemoteApplicationEvent 事件的发送。
      trace:
        enabled: false   #用于开启/关闭消息记录 Trace 的 Listener。
      allowOverride: true
      overrideNone: true
      overrideSystemProperties: false
    stream:
      debugmode: true
      binding-retry-interval: 30
      sender: false  #${spring.stream.sender:false}
#      Binding: 包括 Input Binding 和 Output Binding。
#      Binding 在消息中间件与应用程序提供的 Provider 和 Consumer 之间提供了一个桥梁，
#      实现了开发者只需使用应用程序的 Provider 或 Consumer 生产或消费数据即可，屏蔽了开发者与底层消息中间件的接触。
      bindings:
        #自定义的名称
        springCloudBusOutput:
          destination: springCloudBus   # topic(一级分类)
          content-type: application/json
          producer:
            group: springCloudBusouput
            sync: true
        #自定义的名称
        springCloudBusInput:
          destination: springCloudBus # 订阅的topic ,一级分类
          content-type: application/json
          group: springCloudBusinput    #group
          consumer:
            concurrency: 20
            maxAttempts: 1
            orderly: false  # 是否按顺序消费
        #自定义的名称
        dicSyncOutput:
          destination: dic_version_topic   # topic(一级分类)
          content-type: application/json
          producer:
            group: 'fasp2_group'
            sync: true
        #自定义的名称
        dicSyncInput:
          destination: dic_version_topic # 订阅的topic ,一级分类
          content-type: application/json
          group: 'group_${spring.datasource.username}'    #group
          consumer:
            concurrency: 20
            maxAttempts: 1
            orderly: false  # 是否按顺序消费
            tags: Basicdata_version
        #自定义的名称
        caSyncOutput:
          destination: userroleinfo   # topic(一级分类)
          content-type: application/json
          producer:
            group: casync_output_${spring.datasource.username}
            sync: true
        #        #自定义的名称
        #自定义的名称
        caSyncInput:
          destination: userroleinfo # 订阅的topic ,一级分类
          content-type: application/json
          group: casync_input_${spring.datasource.username}    #group
          consumer:
            concurrency: 20
            maxAttempts: 1
            orderly: false  # 是否按顺序消费
    inetutils:
      ignoredInterfaces:
      - lo
      - eth0
      - eth1

eureka:
  instance:
    hostname: ${eureka.instance.ip-address:${spring.cloud.client.ip-address}}
    instance-id: ${spring.application.name}:${eureka.instance.ip-address:${spring.cloud.client.ip-address}}:${server.port}
    lease-expiration-duration-in-seconds: 600 # 续约更新时间间隔（默认30秒）#服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除,注意，EurekaServer一定要设置eureka.server.eviction-interval-timer-in-ms否则这个配置无效，这个配置一般为服务刷新时间配置的三倍
    lease-renewal-interval-in-seconds: 30 # 续约到期时间（默认90秒）服务刷新时间配置，每隔这个时间会主动心跳一次
    prefer-ip-address: true
    status-page-url-path: /actuator/info
    health-check-url-path: /actuator/health
    metadata-map:
      zone: ${zone.name}
      user:
        name: ${spring.security.user.name}
        password: ${spring.security.user.password}
  client:
    healthcheck:
      #关闭健康检查
      enabled: false
    register-with-eureka: true
    fetch-registry: true
    prefer-same-zone-eureka: true
    registryFetchIntervalSeconds: 50
    #地区
    region: beijing
    availability-zones:
      beijing: zone-1,zone-2
    service-url:
      zone-1: http://${REGISTRY_SERVER_USERNAME:user}:${REGISTRY_SERVER_PASSWORD:password}@${REGISTRY_SERVER1:peer1}:${REGISTRY_SERVER1_PORT:8761}/eureka/
      zone-2: http://${REGISTRY_SERVER_USERNAME:user}:${REGISTRY_SERVER_PASSWORD:password}@${REGISTRY_SERVER2:peer2}:${REGISTRY_SERVER2_PORT:8762}/eureka/

management:
  # 设置端点是否可用 默认只有shutdown可用
  enabled-by-default: true
  endpoints:
    web:
      # 设置是否暴露端点 默认只有health和info可见
      exposure:
        # 包括所有端点
        include: '*'  # 注意需要添加引号
  endpoint:
    health:
      show-details: ALWAYS
    logfile:
      enabled: false #可在线查看日志
    shutdown:
      enabled: true #客户端开启停止服务端点
      sensitive: true  #禁用密码验证
  security:
    enabled: false #SpringBoot 1.5以后的版本都默认开启端点保护

encrypt:
  keyStore:
    location: classpath:/server.jks # jks文件的路径
    password: letmein               # storepass
    alias: mytestkey                # alias
    secret: changeme                # keypass

swagger:
  basePackage: gov.mof.fasp2
  title: 财政信息一体化系统2.0
  description: 外部服务接口API
  version: V3.2.9
#logging:
#  level:
#    root: INFO
#    com:
#      netflix:
#        eureka: 'off'
#        discovery:  'off'
# INFO ENDPOINT CONFIGURATION
info:
  app:
    name: ${spring.application.name}
    java:
      version: ${java.version}
      
#基础配置文件
ifmis:
  fasp2:
    gateway:
#      address: 10.104.28.50:20000
      address: 192.168.2.118:20000
  gateway:
    #微服务网管serviceid
    microservicegatewayname: ${MICROSERVICEGATEWAYNAME:ifmis-gateway-microservice}
    outergatewayname: ${OUTERGATEWAYNAME:ifmis-gateway-outer}
    filters: gov.mof.fasp2.microlog.feign.config.interceptor.MicroCallLogInterceptor,gov.mof.fasp2.buscore.microcall.intercepters.TokenidIntercepter
    
feign:
  hystrix:
    enabled: true 
#ribbon的默认超时配置,这个暂时也不生效
ribbon:     
  ReadTimeout: 3600000
  ConnectTimeout: 3600000
  # 同一台实例最大重试次数,不包括首次调用
  MaxAutoRetries: 0
  # 重试负载均衡其他的实例最大重试次数,不包括首次server
  MaxAutoRetriesNextServer: 0
  # 是否所有操作都重试，POST请求注意多次提交错误。
  # 默认false，设定为false的话，只有get请求会重试
  OkToRetryOnAllOperations: false
hystrix:
  command:
    default:
      execution:
        timeout: 
          enabled: true
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 3600000